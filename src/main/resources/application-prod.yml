spring:
  security:
    oauth2:
      client:
        registration:
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: name, email
            client-authentication-method: client_secret_post   # ★ 네이버는 POST 방식이 안전/호환
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-name: Kakao
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: profile_nickname, account_email
            client-authentication-method: client_secret_post   # ★ 카카오는 대부분 POST 필요
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            client-name: Google
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: openid, profile, email
            # 기본 client-authentication-method=client_secret_basic 유지
          facebook:
            client-id: ${FACEBOOK_CLIENT_ID}
            client-secret: ${FACEBOOK_CLIENT_SECRET}
            client-name: Facebook
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: public_profile, email
            # 기본 client-authentication-method=client_secret_basic 유지
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri:         https://nid.naver.com/oauth2.0/token
            user-info-uri:     https://openapi.naver.com/v1/nid/me
            user-name-attribute: id     # 커스텀 매핑 결과의 key와 일치(우린 id로 통일)
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri:         https://kauth.kakao.com/oauth/token
            user-info-uri:     https://kapi.kakao.com/v2/user/me
            user-name-attribute: id     # 커스텀 매핑 결과의 key와 일치
          facebook:
            authorization-uri: https://www.facebook.com/v18.0/dialog/oauth
            token-uri:         https://graph.facebook.com/v18.0/oauth/access_token
            user-info-uri:     https://graph.facebook.com/v18.0/me?fields=id,name,email
            user-name-attribute: id
  # ↓↓↓ 프록시/쿠키 설정을 꼭 추가 (me 401의 주된 원인 제거)
server:
  forward-headers-strategy: framework       # ★ X-Forwarded-* 신뢰 → {baseUrl} 정확히 계산
  servlet:
    session:
      cookie:
        name: RFSESSIONID
#        domain: recipfree.com             # ★ 세션 쿠키를 recipfree.com에 고정
        path: /
        http-only: true
        secure: true
        same-site: LAX                     # 크로스 도메인 필요 시 NONE(+ HTTPS 필수)

app:
  front-base: https://recipfree.com

logging:
  level:
    com.homecook.ai_recipe: DEBUG
    org.springframework.security: DEBUG